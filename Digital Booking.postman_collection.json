{
	"info": {
		"_postman_id": "4d37278d-7d65-4446-8fce-8c68122adbf5",
		"name": "Digital Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24445855",
		"_collection_link": "https://blue-robot-295847.postman.co/workspace/Digital-Booking~dc14b9ac-1d99-41fe-9398-95483a92c9e3/collection/24445855-4d37278d-7d65-4446-8fce-8c68122adbf5?action=share&creator=24445855&source=collection_link"
	},
	"item": [
		{
			"name": "/digitalbooking",
			"item": [
				{
					"name": "/product",
					"item": [
						{
							"name": "createProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Succesful request\r",
											"pm.test(\"Successful POST request, product created.\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
											"});\r",
											"\r",
											"// Bad request\r",
											"pm.test(\"Bad POST request.\", function () {\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});\r",
											"\r",
											"// No Not Null or Empty expected at any value\r",
											"let reqBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Verify the values are not null or empty\", function () {\r",
											"    pm.expect(reqBody.name).to.not.null\r",
											"    pm.expect(reqBody.name).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.brand).to.not.null;\r",
											"    pm.expect(reqBody.brand).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.state).to.not.null;\r",
											"    pm.expect(reqBody.state).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.price).to.not.null;\r",
											"    pm.expect(reqBody.price).to.not.be.NaN;\r",
											"    \r",
											"    pm.expect(reqBody.description).to.not.null;\r",
											"    pm.expect(reqBody.description).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.size).to.not.null;\r",
											"    pm.expect(reqBody.gender).to.not.empty;\r",
											"    \r",
											"    pm.expect(reqBody.gender).to.not.null;\r",
											"    pm.expect(reqBody.gender).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.deposit).to.not.null;\r",
											"    pm.expect(reqBody.deposit).to.not.be.NaN;\r",
											"\r",
											"    pm.expect(reqBody.idCategory).to.not.null;\r",
											"    pm.expect(reqBody.idCategory).to.not.be.NaN;\r",
											"\r",
											"    pm.expect(reqBody.image).to.not.null\r",
											"    pm.expect(reqBody.image).to.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"TestRunner Product2\",\r\n  \"brand\": \"TestRunner Brand2\",\r\n  \"state\": \"TestRunner State2\",\r\n  \"price\": 100,\r\n  \"description\": \"TestRunner Description2\",\r\n  \"size\": \"TestRunner Size2\",\r\n  \"gender\": \"TestRunner Gender2\",\r\n  \"deposit\": 10,\r\n  \"idCategory\": 1,\r\n  \"image\": \"image\",\r\n  \"fileName\": \"image.jpg\",\r\n  \"color\": \"TestColor\",\r\n  \"material\": \"TestMaterial\",\r\n  \"secundaryImages\": [\r\n      {\r\n          \"image\": \"image2\",\r\n          \"fileName\": \"image2.jpg\"\r\n      }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/product",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"product"
									]
								}
							},
							"response": []
						},
						{
							"name": "/products listProducts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200, showing product` , function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(`Status code is 404, product not found.` , function () {\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/product/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"product",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "/{id-product} getProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200, showing product.', function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(`Status code is 404, product not found.` , function () {\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/product/32",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"product",
										"32"
									]
								}
							},
							"response": []
						},
						{
							"name": "/{id-product} deleteProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404, product not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200, product deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/product/50",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"product",
										"50"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/category",
					"item": [
						{
							"name": "/categories listCategories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200, showing categories.', function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/category/categories",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"category",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "/{id-category} getCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200, showing category.', function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404, category not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/category/3",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"category",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "createCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Succesful request\r",
											"pm.test(\"Successful POST request, category created.\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
											"});\r",
											"\r",
											"// Bad request\r",
											"pm.test(\"Bad POST request.\", function () {\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});\r",
											"\r",
											"// No Not Null or Empty expected at any value\r",
											"let reqBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Verify the values are not null or empty\", function () {\r",
											"    pm.expect(reqBody.name).to.not.null\r",
											"    pm.expect(reqBody.name).to.not.empty;\r",
											"    \r",
											"    pm.expect(reqBody.image).to.not.null\r",
											"    pm.expect(reqBody.image).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.description).to.not.null;\r",
											"    pm.expect(reqBody.description).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.fileName).to.not.null;\r",
											"    pm.expect(reqBody.fileName).to.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"TestRunner Name\",\r\n  \"image\": \"image\",\r\n  \"description\": \"TestRunner Description\",\r\n  \"fileName\": \"TestRunner.jpg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/category",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"category"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/user",
					"item": [
						{
							"name": "/{id-user} getUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200, showing user.', function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(`Status code is 404, user not found.` , function () {\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/user/1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"user",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "createUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Succesful request\r",
											"pm.test(\"Successful POST request, user created.\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
											"});\r",
											"\r",
											"// Bad request\r",
											"pm.test(\"Bad POST request.\", function () {\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});\r",
											"\r",
											"// No Not Null or Empty expected at any value\r",
											"let reqBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Verify the values are not null or empty\", function () {\r",
											"    pm.expect(reqBody.name).to.not.null\r",
											"    pm.expect(reqBody.name).to.not.empty;\r",
											"    \r",
											"    pm.expect(reqBody.lastName).to.not.null\r",
											"    pm.expect(reqBody.lastName).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.email).to.not.null;\r",
											"    pm.expect(reqBody.email).to.not.empty;\r",
											"\r",
											"    pm.expect(reqBody.password).to.not.null;\r",
											"    pm.expect(reqBody.password).to.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"TestRunner UserName2\",\r\n    \"lastName\": \"TestRunner UserLastName2\",\r\n    \"email\": \"TestRunner2@gmail.com\",\r\n    \"password\": \"TestRunnerPass2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/user",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8080/digitalbooking",
			"type": "string"
		}
	]
}